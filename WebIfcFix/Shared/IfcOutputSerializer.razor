@using System.Text
@inject IJSRuntime JS;
@inject IFileNameService NameService;

<div class="card m-1">
	<div class="row g-0">
		<div class="col-1">
			<ProcessStatusIndicator Status="Status" Message="@Message" />
		</div>
		<div class="col p-1">
			<p>
				Then process will be done - clicking this button will save IFC to downloads.
			</p>
			<button
				@onclick="@SafeIfcFile"
				disabled="@_disableSaveButton"
				class="btn @_buttonClass my-1">
				Save to file
			</button>
		</div>
	</div>
</div>

@code {
	public ProcessStatus Status { get; set; } = ProcessStatus.Waiting;
	public string Message { get; set; } = string.Empty;
	private bool _disableSaveButton => Status != ProcessStatus.Done;
	private string _buttonClass => _disableSaveButton ? "btn-secondary" : "btn-success";

	[Parameter]
	[EditorRequired]
	public required DbSerializer Serializer { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Serializer.StateChanged += HandleStateChange;
		Serializer.ProcessDone += SignalReadyToSave;
	}

	private ValueTask HandleStateChange(CancellationToken ct)
	{
		if (Serializer.Input is not null)
		{
			Status = ProcessStatus.Processing;
		}
		else
		{
			Status = ProcessStatus.Waiting;
		}
		Message = string.Empty;
		StateHasChanged();
		return ValueTask.CompletedTask;
	}

	private ValueTask SignalReadyToSave(CancellationToken ct)
	{
		if (Serializer.Output is not null)
		{
			Status = ProcessStatus.Done;
		}
		else
		{
			Status = ProcessStatus.Error;
			Message = "Error on deserializing";
		}
		StateHasChanged();
		return ValueTask.CompletedTask;
	}

	private async Task SafeIfcFile()
	{
		try
		{
			Message = string.Empty;
			var encodingISO_8859_1 = Encoding.GetEncoding("ISO-8859-1");
			var byteArray = encodingISO_8859_1.GetBytes(Serializer!.Output!);

			await JS.InvokeVoidAsync(
						"saveAsFile",
						NameService.GetOutputFileName(),
						Convert.ToBase64String(byteArray));
		}
		catch(Exception ex)
		{
			Status = ProcessStatus.Error;
			Message = "Save failed. Error: " + ex.Message;
		}
		finally
		{
			StateHasChanged();
		}
	}
}
