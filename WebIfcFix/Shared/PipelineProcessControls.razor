@using IfcFixLib.IfcPipelineDefinition
@inject LayoutManagerService LayoutManager

@if (LayoutManager.DbParser.Output is not null)
{
	<button
		class="btn btn-primary"
		@onclick="@StartStopToggle"
		type="button">
		@_btnLabel
	</button>
}

@code {
	[Parameter]
	[EditorRequired]
	public EventCallback OnProcessDone { get; set; }

	private bool _pipelineIsProcessing = false;
	private string _btnLabel => _pipelineIsProcessing ? "Stop" : "Start";

	private void StartStopToggle()
	{
		if (_pipelineIsProcessing)
		{
			LayoutManager.PipelineManager!.StopProcessing();
		}
		else
		{
			Continue();
		}
		_pipelineIsProcessing = !_pipelineIsProcessing;
		StateHasChanged();
	}

	private void Continue()
	{
		Task processingTask;
		IPipeConnector lastNodeConnector = LayoutManager.ComponentsLayout.Last().PipelineNode!.Value!;
		if (lastNodeConnector.Status != ProcessStatus.Done)
		{
			processingTask = LayoutManager.PipelineManager!.ContinueProcessingAsync();
		}
		else
		{
			LayoutManager.DbSerializer.Input = lastNodeConnector.Filter.Output;
			CancellationToken token = LayoutManager.PipelineManager!.GetNewCancelToken();
			processingTask = LayoutManager.DbSerializer.ProcessAsync(token);
		}
		processingTask.ContinueWith((x) =>
		{
			_pipelineIsProcessing = false;
			StateHasChanged();
			OnProcessDone.InvokeAsync();
		});
	}
}
