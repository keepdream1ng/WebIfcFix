@using System.Net

@inject NavigationManager NavManager
@inject IJsonConvertService Json
@inject ILocalStorageService ClientStorage
@inject IUrlQueryParameterService UrlQueryService
@inject LayoutManagerService LayoutManager
@inject IJSRuntime JS
@inject PredefinedLayoutsService PredefinedLayouts

<div class="row m-5">
	<div class="d-grid gap-2 d-md-block">
		<button
		class="btn btn-primary tooltip-source @_shareBtnClass"
		@onclick="@SerializeAndShareLayout"
		type="button">
			Share layout
			<span
				class="alert tooltip-text tooltip-popover w-200 mw-vw-60 @_shareBtnTooltipClass">
				@_shareBtnTooltipText
			</span>
		</button>
		<button
		class="btn @_showSaveOptionsBtnClass tooltip-source"
		@onclick="@ToggleShowSaveOptions"
		type="button">
			Save layout
			<span
				class="alert alert-info tooltip-text tooltip-popover w-200 mw-vw-60">
				Save current instructions layout locally in the browser. Use 'Share layout' to create a link to web app.
			</span>
		</button>
		<button
		class="btn @_showLoadOptionsBtnClass tooltip-source"
		@onclick="@ToggleShowLoadOptions"
		type="button">
			Load layout
			<span
				class="alert alert-info tooltip-text tooltip-popover w-200 mw-vw-60">
				Load instructions layout stored locally from the browser.
			</span>
		</button>
		@if (!string.IsNullOrEmpty(_layoutSerialized))
		{
			<label class="px-4">
				<InputCheckbox class="form-check-input" @bind-Value="_showSerializedLayout"/>
				Show serialized layout
			</label>
		}
	</div>
</div>

@if (_showSerializedLayout)
{
	<div class="row m-5">
		<div class="card p-0">
			<div class="card-body">
				<h5 class="card-title">
					Serialized layout
				</h5>
				<pre>
					<code>
						@_layoutSerialized
					</code>
				</pre>
			</div>
			<div class="card-footer">
				Encoded layout length @_layoutSerialized.Length compressed into @LayoutEncoded.Length chars
			</div>
		</div>
	</div>
}

@if (_showSaveOptions)
{
	<div class="input-group m-5">
		<InputText
		class="form-control"
		placeholder="Name for saving layout locally"
		aria-label="Name for saving layout locally"
		aria-describedby="saveLayoutBtn"
		@bind-Value="@_nameToSave"/>
		<button
		class="btn btn-primary"
		@onclick="@SaveLayout"
		id="saveLayoutBtn"
		type="button">
			Save
		</button>
	</div>
}

@if (_showLoadOptions && _savedLayouts is not null && _savedLayouts.Count > 0)
{
	<div class="input-group m-5">
		<InputSelect
		class="form-select"
		aria-label="Options to load saved layouts"
		aria-describedby="loadLayoutBtn"
		@bind-Value="_layoutToLoad">
			@foreach (string savedLayout in _savedLayouts!)
			{
				<option value="@savedLayout">@savedLayout</option>
			}
		</InputSelect>
		<button
		class="btn btn-primary"
		@onclick="@LoadLayout"
		id="loadLayoutBtn"
		type="button">
			Load layout
		</button>
	</div>
}

@code {
	[Parameter]
	[EditorRequired]
	public EventCallback OnLayoutUpdate { get; set; }

	[SupplyParameterFromQuery()]
	public string? version { get; set; }

	[SupplyParameterFromQuery(Name = nameof(this.layout))]
	public string LayoutEncoded { get; set; } = String.Empty;

	private List<SerializableModelBase>? layout { get; set; } =
		[
			new FilterByStringComponentModel(),
			new IfcDataDuplicatorModel()
		];

	private string _layoutSerialized = String.Empty;
	private string _nameToSave = String.Empty;
	private string _layoutToLoad = String.Empty;
	private List<string>? _savedLayouts;
	private bool _showLoadOptions = false;
	private string _showLoadOptionsBtnClass => _showLoadOptions? "btn-outline-primary" : "btn-primary";
	private bool _showSaveOptions = false;
	private string _showSaveOptionsBtnClass => _showSaveOptions? "btn-outline-primary" : "btn-primary";
	private bool _showSerializedLayout = false;
	private bool _shareBtnActive = false;
	private string _shareBtnTooltipText => _shareBtnActive ? "Link succesfully copied to clipboard!" : "Copy link to current instructions layout to clipboard";
	private string _shareBtnTooltipClass => _shareBtnActive ? "alert-success" : "alert-info";
	private string _shareBtnClass => _shareBtnActive ? "active" : "";

	public async Task SaveLayout()
	{
		_savedLayouts!.Add(_nameToSave);
		await ClientStorage.SetItemAsync(nameof(_savedLayouts), _savedLayouts);
		await ClientStorage.SetItemAsync(_nameToSave, LayoutManager.ComponentsLayout);
		StateHasChanged();
	}
	public async Task LoadLayout()
	{
		var layout = await ClientStorage.GetItemAsync<List<SerializableModelBase>>(_layoutToLoad);
		if (layout is null)
		{
			layout = PredefinedLayouts.GetLayoutByName(_layoutToLoad);
		}
		if (layout is not null)
		{
			LayoutManager.ImportLayout(layout);
		}
		await OnLayoutUpdate.InvokeAsync();
		StateHasChanged();
	}

	public async Task SerializeAndShareLayout()
	{
		_layoutSerialized = Json.SerializeObject(LayoutManager.ComponentsLayout);
		LayoutEncoded = UrlQueryService.GetQueryParameterFromJson(_layoutSerialized);
		string url = NavManager.GetUriWithQueryParameters(
			new Dictionary<string, object?>()
			{
				[nameof(this.version)] = version ?? "v1",
				[nameof(this.layout)] = LayoutEncoded
			}
		);
		NavManager.NavigateTo(url);
		await JS.InvokeVoidAsync("copyTextToClipboard", url);
		_shareBtnActive = true;
		StateHasChanged();
		await Task.Delay(3000);
		_shareBtnActive = false;
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		Task predefinedLayoutsLoading = PredefinedLayouts.LoadDataAsync();
		if (!String.IsNullOrEmpty(LayoutEncoded))
		{
			try
			{
				if (String.IsNullOrEmpty(version) || version != "v1")
				{
					throw new NotSupportedException();
				}
				_layoutSerialized = UrlQueryService.GetSanitizedJsonFromQueryParameter(LayoutEncoded);
				var layoutFromQuery = Json.DeserializeObject<List<SerializableModelBase>>(_layoutSerialized);
				if (layoutFromQuery is not null)
				{
					layout = layoutFromQuery;
				}
			}
			catch
			{
				layout!.Insert(0, new BrokenLinkIndicatorModel());
			}
		}
		LayoutManager.ImportLayout(layout!);
		_savedLayouts = await ClientStorage.GetItemAsync<List<string>>(nameof(_savedLayouts)) ?? new List<string>();
		await predefinedLayoutsLoading;
		_savedLayouts.AddRange(PredefinedLayouts.GetPredefinedLayoutsNames());
		StateHasChanged();
		await OnLayoutUpdate.InvokeAsync();
	}

	private void ToggleShowLoadOptions() => _showLoadOptions = !_showLoadOptions;

	private void ToggleShowSaveOptions() => _showSaveOptions = !_showSaveOptions;
}
