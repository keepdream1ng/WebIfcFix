@inject LayoutManagerService LayoutManager
@inject IFileNameService NameService

<div class="card m-1">
	<div class="row g-0">
		<div class="col-1">
			<ProcessStatusIndicator Status="Status" Message="@Message" />
		</div>
		<div class="col p-1">
			<p>Input your IFC file below. Your data newer sent elsewhere.</p>
			<InputFile class="form-control mb-4" OnChange="ProcessFile" accept=".ifc" />
		</div>
	</div>
</div>

@code {
	public ProcessStatus Status { get; set; } = ProcessStatus.Waiting;
	public string Message = string.Empty;
	private IBrowserFile? _file;
	private long _maxFileSize = 51200000000;

	[Parameter]
	[EditorRequired]
	public required DbParser Parser { get; set; }

	[Parameter]
	[EditorRequired]
	public EventCallback OnProcessDone { get; set; }

	private async Task ProcessFile(InputFileChangeEventArgs e)
	{
		_file = e.File;
		Message = string.Empty;
		NameService.InputFileName = _file.Name;
		Status = ProcessStatus.Processing;
		await Task.Run(async () => await ParseAsync()).ConfigureAwait(false);
	}

	private async Task ParseAsync()
	{
		try
		{
			System.IO.Stream fileStream = _file!.OpenReadStream(_maxFileSize);
			CancellationToken token = LayoutManager.PipelineManager!.GetNewCancelToken();
			_ = await Parser.ParseFromStreamAsync(fileStream, token);
		}
		catch(TaskCanceledException)
		{
			Status = ProcessStatus.Cancelled;
		}
		catch(Exception ex)
		{
			Message = "Read failed. Error: " + ex.Message;
			Status = ProcessStatus.Error;
		}
		finally
		{
			if (Parser.Output is not null)
			{
				Message = "Read completed";
				Status = ProcessStatus.Done;
			}
			StateHasChanged();
			await OnProcessDone.InvokeAsync();
		}
	}
}
