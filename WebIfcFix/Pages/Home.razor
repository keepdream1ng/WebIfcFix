@page "/"

@inject IComponentsTypesService TypesService
@inject LayoutManagerService LayoutManager

<div class="sticky-top row" style="background-color: var(--bs-body-bg)">
	<div class="col">
		<div class="@hiddenCollapseBtnClass row mb-2">
			<button
			class="btn btn-primary"
			type="button"
			@onclick="MenuToggle"
			>
				@collapseBtnText
			</button>
		</div>
		<div class="row @menuCssClass">
			<div class="col">
				<LayoutPersistance OnLayoutUpdate="UpdateState" />
			</div>
			<div class="col-md-3 d-flex align-items-center justify-content-center">
				<div class="row m-md-5">
					<div class="d-grid gap-2 d-md-block">
						<PipelineProcessControls OnProcessDone="UpdateState" />
						<ThemeToggler/>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="no-select">
	<Tutorial/>
	<div class="row">
		<div class="col-7 col-md">
			<h3>Ifc editing instructions</h3>
			<IfcInputParser Parser="LayoutManager.DbParser" OnProcessDone="UpdateState" />
			<SortableList
			Group="IfcFilters"
			Items="LayoutManager.ComponentsLayout"
			Handle=".handle"
			OnUpdate="SortList"
			OnRemove="RemoveComponent"
			DoCallbackOnMoveToId="true"
			OnMoveToId=OnMoveToId
			Context="model">
				<SortableItemTemplate>
					<div class="card m-1">
						<div class="row g-0">
							<div class="col-1 handle" style="cursor: move">
								<PipeConnectorStatusIndicator Connector="@model.PipelineNode!.Value" />
							</div>
							<div class="col p-1"
							@oninput="() => LayoutManager.ResetFromNode(model.PipelineNode!)">
								<DynamicComponent Type=@Type.GetType(model.ComponentTypeName!) Parameters="@model.GetParameters()"/>
							</div>
						</div>
					</div>
				</SortableItemTemplate>
			</SortableList>
			<IfcOutputSerializer Serializer="LayoutManager.DbSerializer" />
		</div>
		<div class="col-5 col-md-3">
			<div
			style="overflow-y: auto; overflow-x:clip"
			class="row flex-column h-100 position-relative @componentBG">
				<h3>Filter components</h3>
				<SortableList
				Id="@componentsId"
				Class="@componentClass"
				Group="IfcFilters"
				Items="TypesService.ComponentsTypes"
				Sort="false"
				Pull="clone"
				OnRemove="CreateNewComponent"
				Context="type">
					<SortableItemTemplate>
						<div class="card m-1 @componentsOpacity" style="cursor: move">
							<div class="card-body tooltip-source">
								@type.FilterName
								<span class="alert alert-info tooltip-text tooltip-popover">
									@type.FilterInstructions
								</span>
							</div>
						</div>
					</SortableItemTemplate>
				</SortableList>
			</div>
		</div>
	</div>
</div>


@code {
	private bool componentsIsHovered { get; set; }
	private bool collapseMenu = false;
	private string componentsId { get; } = "componentsCollection";
	private string componentBG => componentsIsHovered ? "bg-success" : ".bg-transparent";
	private string componentClass => $"col-12 flex-fill {backgroundCss}";
	private string componentsOpacity => componentsIsHovered ? "opacity-0" : "opacity-100";
	private string backgroundCss => componentsIsHovered ? "background-svg" : "";
	private string menuCssClass => collapseMenu ? "collapse" : String.Empty;
	private string hiddenCollapseBtnClass => collapseMenu ? "" : "d-md-none";
	private string collapseBtnText => collapseMenu ? "⇩ Menu ⇩" : "⇧ Menu ⇧";

	private void UpdateState()
	{
		StateHasChanged();
	}

	private void OnMoveToId(string id)
	{
		if (!componentsIsHovered)
		{
			componentsIsHovered = id == componentsId;
			UpdateState();
		}
		else
		{
			if (id != componentsId)
			{
				componentsIsHovered = false;
				UpdateState();
			}
		}
	}

	private void SortList((int oldIndex, int newIndex) indices)
	{
		LayoutManager.ReorderLayout(indices.oldIndex, indices.newIndex);
		UpdateState();
	}

	private void CreateNewComponent((int oldIndex, int newIndex) indices)
	{
		LayoutManager.InsertNew(indices);
		UpdateState();
	}

	private void RemoveComponent((int oldIndex, int newIndex) indices)
	{
		LayoutManager.RemoveElementAt(indices.oldIndex);
		componentsIsHovered = false;
		UpdateState();
	}

	private void MenuToggle()
	{
		collapseMenu = !collapseMenu;
		StateHasChanged();
	}
}
