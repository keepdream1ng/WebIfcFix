@page "/"

@inject IComponentsTypesService TypesService
@inject LayoutManagerService LayoutManager

<div class="sticky-top row bg-body">
	<div class="col">
		<LayoutPersistance OnLayoutUpdate="UpdateState" />
	</div>
	<div class="col-3">
		<div class="row m-5">
			<div class="d-grid gap-2 d-md-block">
				<PipelineProcessControls OnProcessDone="UpdateState" />
				<ThemeToggler/>
			</div>
		</div>
	</div>
</div>

<div class="no-select">
	<div class="row">
		<div class="col">
			<h3>Ifc editing instructions</h3>
			<IfcInputParser Parser="LayoutManager.DbParser" OnProcessDone="UpdateState" />
			<SortableList
				Group="IfcFilters"
				Items="LayoutManager.ComponentsLayout"
				Handle=".handle"
				OnUpdate="SortList"
				OnRemove="RemoveComponent"
				DoCallbackOnMoveToId="true"
				OnMoveToId=OnMoveToId
				Context="model">
				<SortableItemTemplate>
					<div class="card m-1">
						<div class="row g-0">
							<div class="col-1 handle" style="cursor: move">
								<PipeConnectorStatusIndicator Connector="@model.PipelineNode!.Value" />
							</div>
							<div class="col p-1"
								@oninput="() => LayoutManager.ResetFromNode(model.PipelineNode!)">
								<DynamicComponent Type=@Type.GetType(model.ComponentTypeName!) Parameters="@model.GetParameters()"/>
							</div>
						</div>
					</div>
				</SortableItemTemplate>
			</SortableList>
			<IfcOutputSerializer Serializer="LayoutManager.DbSerializer" />
		</div>
		<div class="col-3">
			<div
				style="overflow-y: auto; overflow-x:clip"
				class="row flex-column h-100 position-relative">
				<h3>Filters components (drag and drop)</h3>
				<GarbageBinSVG Fill="white" Class="@svgClass"/>
				<SortableList
					Id="@componentsId"
					Class="@componentClass"
					Group="IfcFilters"
					Items="TypesService.ComponentsTypes"
					Sort="false"
					Pull="clone"
					OnRemove="CreateNewComponent"
					Context="type">
					<SortableItemTemplate>
						<div class="card m-1 @componentsOpacity" style="cursor: move">
							<div class="card-body tooltip-source">
								@type.FilterName
								<span class="alert alert-info tooltip-text tooltip-popover">
									@type.FilterInstructions
								</span>
							</div>
						</div>
					</SortableItemTemplate>
				</SortableList>
			</div>
		</div>
	</div>
</div>


@code {
	private bool componentsIsHovered { get; set; }
	private string componentsId { get; } = "componentsCollection";
	private string componentBG => componentsIsHovered ? "bg-success" : ".bg-transparent";
	private string componentClass => $"col-12 flex-fill {componentBG}";
	private string componentsOpacity => componentsIsHovered ? "opacity-0" : "opacity-100";
	private string opacityIcon => componentsIsHovered ? "opacity-100" : "opacity-0";
	private string svgClass => $"background-svg {opacityIcon}";

	private void UpdateState()
	{
		StateHasChanged();
	}

	private void OnMoveToId(string id)
	{
		if (!componentsIsHovered)
		{
			componentsIsHovered = id == componentsId;
			UpdateState();
		}
		else
		{
			if (id != componentsId)
			{
				componentsIsHovered = false;
				UpdateState();
			}
		}
	}

	private void SortList((int oldIndex, int newIndex) indices)
	{
		LayoutManager.ReorderLayout(indices.oldIndex, indices.newIndex);
		UpdateState();
	}

	private void CreateNewComponent((int oldIndex, int newIndex) indices)
	{
		LayoutManager.InsertNew(indices);
		UpdateState();
	}

	private void RemoveComponent((int oldIndex, int newIndex) indices)
	{
		LayoutManager.RemoveElementAt(indices.oldIndex);
		componentsIsHovered = false;
		UpdateState();
	}
}
